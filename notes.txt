----------
Section 2
----------
2.13 How an Angular App gets Loaded and Started
- Angular stellt Single Page Application (SPA) bereit. Es wird immer die index.html Datei bereitgestellt im Browser
- Einstieg von Angular ist immer die main.ts Datei
- Innerhalb der main.ts Datei steht folgendes statement: platformBrowserDynamic().bootstrapModule(AppModule).catch(err => console.error(err));
- Dieses verweist auf das AppModule, also auf die app.module.ts Datei
- Hier ist dieses Statement entscheidend: bootstrap: [AppComponent]
- Dieses verweist auf die app.component.ts Datei. Dort werden die Parameter eingelesen, die über den Decorator @Component übergeben werden
- In der index.html Datei ist der Selektor <app-root> angegeben. Dieser wird dann aus der app.component.ts eingelesen und schaut auf die app.component.html
und setzt alles was in der app.component.html steht in den <app-root>-Selektor eingelesen

2.14 Components are Important!
- Angular isr im Grunde ein JS-Framework, welches das HTML-DOM zur Laufzeit manipuliert
- Jede Component hat sein eigenes Template mit seinem HTML-Code, sein eigenes Styling und das wichtigste, seine eigene Business-Logik
- Jede komplexe Web-Anwendung wird in Komponenten aufgeteilt, die dann wiederum mehrfach wiederverndet werden können

2.15 Creating a New Component
- app.component.ts ist die root-Component einer jeden Angular-App, da diese im app.module.ts "gebootstrapped" wird
- Eine Component ist eine Typescript Klasse die von Angular instanziiert wird, um Objekte davon erzeugen zu können
- Dekorators werden immer mit @ eingeleitet

2.16 Understanding the Role of AppModule and Component Declaration
- Angular nutzt Components, um Webseites zu bauen und benutzt Modules um bestimmte Teile (z.B. Components) zu Pakete zu schnüren
- Das App Module ist ein Bundle an Funktionalitäten der Angular AppComponent
- Die neue Component muss in der app.module.ts Datei in den declarations referenziert werden und über ein import Statement relativ referenziert werden, in
imports innerhalb von ngModule, werden weitere Module dem app.module hinzugefügt, weil Angular selber in Modulen aufgeteilt ist. Die default-Werte sind,
BrowserModule, FormsModule und HttpModule, die die Grundfunktionalitäten von Angular bereitstellen

2.17 Using Custom Components
- <app-server> HTML-Tag der app.component.html Datei hinzufügen, um die neue Server-Component nutzen zu können. Das <app-server> Tag bezieht dann den 
HTML-Code aus der server.component.html-Datei

2.18 Creating Components with the CLI & Nesting Components
- Components können auch über die Angular CLI erzeugt werden mittels: ng generate component [Name of the component e.g. servers] or shorter: ng g c [Name]
- Über die CLI erzeugte Components werden automatisch der declaration in der app.module.ts hinzugefügt, sowie auch das import Statement

2.19 Working with Component Templates
- Anstatt in der servers.component.ts Datei im Component Decorator die templateUrl zu referenzieren kann das Tag auch in template umbenannt werden und dann
den HTML Code direkt Inline reinschreiben. Für mehrere Zeilen sollten ``(Backticks) verwendet werden

2.20 Working with Component Styles
- Innerhalb der app.component.css Datei kann das CSS-Styling vorgenommen werden
- Die templateURL kann nur einen String beinhalten, wo hingegen der styleUrls ein Array von Strings übergeben werden kann mit verschiedenen .css Files,
die das Styling verändern
- Anstatt des styleUrls-Objekts innerhalb des Component Decorators kann auch das styles Objekt übergeben werden, indem die Styles mit ``(Backticks)
über mehrere Zeilen Plain reingeschrieben werden können anstatt diese in einem externen File zu definieren